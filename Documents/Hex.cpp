#include "Hex.h"
#include <iostream>
#include <string.h>
#include <stdio.h>

using namespace std;

void Hex::toBin(string hex){
	{
	long int i = 0;
	char binnum[100], hexdec[100];
	int k = 0;
	string h = hex;
	int n = h.length;
	strcpy(hexdec, h.c_str());
	while (hexdec[i])
	{
		switch (hexdec[i])
		{
		case '0': cout << "0000";
			binnum[k] = '0';
			binnum[k+1] = '0';
			binnum[k+2] = '0';
			binnum[k+3] = '0';
			k += 4;
			break;
		case '1': cout << "0001";
			binnum[k] = '0';
			binnum[k + 1] = '0';
			binnum[k + 2] = '0';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case '2': cout << "0010";
			binnum[k] = '0';
			binnum[k + 1] = '0';
			binnum[k + 2] = '1';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case '3': cout << "0011";
			binnum[k] = '0';
			binnum[k + 1] = '0';
			binnum[k + 2] = '1';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case '4': cout << "0100";
			binnum[k] = '0';
			binnum[k + 1] = '1';
			binnum[k + 2] = '0';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case '5': cout << "0101";
			binnum[k] = '0';
			binnum[k + 1] = '1';
			binnum[k + 2] = '0';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case '6': cout << "0110";
			binnum[k] = '0';
			binnum[k + 1] = '1';
			binnum[k + 2] = '1';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case '7': cout << "0111";
			binnum[k] = '0';
			binnum[k + 1] = '1';
			binnum[k + 2] = '1';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case '8': cout << "1000";
			binnum[k] = '1';
			binnum[k + 1] = '0';
			binnum[k + 2] = '0';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case '9': cout << "1001";
			binnum[k] = '1';
			binnum[k + 1] = '0';
			binnum[k + 2] = '0';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case 'A': cout << "1010";
			binnum[k] = '1';
			binnum[k + 1] = '0';
			binnum[k + 2] = '1';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case 'B': cout << "1011";
			binnum[k] = '1';
			binnum[k + 1] = '0';
			binnum[k + 2] = '1';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case 'C': cout << "1100";
			binnum[k] = '1';
			binnum[k + 1] = '1';
			binnum[k + 2] = '0';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case 'D': cout << "1101";
			binnum[k] = '1';
			binnum[k + 1] = '1';
			binnum[k + 2] = '0';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case 'E': cout << "1110";
			binnum[k] = '1';
			binnum[k + 1] = '1';
			binnum[k + 2] = '1';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case 'F': cout << "1111";
			binnum[k] = '1';
			binnum[k + 1] = '1';
			binnum[k + 2] = '1';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case 'a': cout << "1010";
			binnum[k] = '1';
			binnum[k + 1] = '0';
			binnum[k + 2] = '1';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case 'b': cout << "1011";
			binnum[k] = '1';
			binnum[k + 1] = '0';
			binnum[k + 2] = '1';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case 'c': cout << "1100";
			binnum[k] = '1';
			binnum[k + 1] = '1';
			binnum[k + 2] = '0';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case 'd': cout << "1101";
			binnum[k] = '1';
			binnum[k + 1] = '1';
			binnum[k + 2] = '0';
			binnum[k + 3] = '1';
			k += 4;
			break;
		case 'e': cout << "1110";
			binnum[k] = '1';
			binnum[k + 1] = '1';
			binnum[k + 2] = '1';
			binnum[k + 3] = '0';
			k += 4;
			break;
		case 'f': cout << "1111";
			binnum[k] = '1';
			binnum[k + 1] = '1';
			binnum[k + 2] = '1';
			binnum[k + 3] = '1';
			k += 4;
			break;
		default: cout << "\nInvalid hexadecimal digit " << hexdec[i];
		}
		i++;
	}
}
	return binum;
}
